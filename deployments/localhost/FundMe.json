{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26376b5677d33f1ab186dc72703e1ecc825fbffb75e67229b43119f56778eb98",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1019438",
    "logsBloom": "0x
    "blockHash": "0xe1732716d820a7b93dcd41448b244d641b0b5bd685d5af751206728b545cd789",
    "transactionHash": "0x26376b5677d33f1ab186dc72703e1ecc825fbffb75e67229b43119f56778eb98",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1019438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "14156b9ea7076d4c4447ad2aeb1f6490",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n  using PriceConverter for uint256;\\r\\n\\r\\n  mapping(address => uint256) public addressToAmountFunded;\\r\\n  address[] public funders;\\r\\n\\r\\n  // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n  address public immutable i_owner;\\r\\n  uint256 public constant MINIMUM_USD = 50 * 10**18; // because getConversionRate() returns data with *10e18\\r\\n\\r\\n  AggregatorV3Interface public priceFeed;\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    // require(msg.sender == owner);\\r\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address priceFeedAddress) {\\r\\n    i_owner = msg.sender;\\r\\n    priceFeed = AggregatorV3Interface(priceFeedAddress); // A MockV3Aggregator contract is initiated\\r\\n  }\\r\\n\\r\\n  // fallback() external payable {\\r\\n  //     fund();\\r\\n  // }\\r\\n\\r\\n  // receive() external payable {\\r\\n  //     fund();\\r\\n  // }\\r\\n\\r\\n  function fund() public payable {\\r\\n    require(\\r\\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\r\\n      \\\"You need to spend more ETH!\\\"\\r\\n    ); // this is where i use priceconverter\\r\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n    addressToAmountFunded[msg.sender] += msg.value;\\r\\n    funders.push(msg.sender);\\r\\n  }\\r\\n\\r\\n  // function getVersion() public view returns (uint256){\\r\\n  //     // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n  //     return priceFeed.version();\\r\\n  // }\\r\\n\\r\\n  function withdraw() public payable onlyOwner {\\r\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\r\\n      address funder = funders[funderIndex];\\r\\n      addressToAmountFunded[funder] = 0;\\r\\n    }\\r\\n    funders = new address[](0);\\r\\n    // // transfer\\r\\n    // payable(msg.sender).transfer(address(this).balance);\\r\\n    // // send\\r\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n    // require(sendSuccess, \\\"Send failed\\\");\\r\\n    // call\\r\\n    (bool callSuccess, ) = payable(msg.sender).call{\\r\\n      value: address(this).balance\\r\\n    }(\\\"\\\"); // credit the owner\\r\\n    require(callSuccess, \\\"Call failed\\\");\\r\\n  }\\r\\n\\r\\n  function cheaperWithdraw() public payable onlyOwner {\\r\\n    // read funders array into memory array m_funders\\r\\n    address[] memory m_funders = funders;\\r\\n    for (\\r\\n      uint256 funderIndex = 0;\\r\\n      funderIndex < m_funders.length;\\r\\n      funderIndex++\\r\\n    ) {\\r\\n      address funder = m_funders[funderIndex]; // now reading from memory not storage\\r\\n      addressToAmountFunded[funder] = 0; // writing to storage, mappings cant be stored in memory\\r\\n    }\\r\\n    funders = new address[](0); // resetting the funders array\\r\\n\\r\\n    (bool callSuccess, ) = payable(msg.sender).call{\\r\\n      value: address(this).balance\\r\\n    }(\\\"\\\"); // credit the owner\\r\\n    require(callSuccess, \\\"Call failed\\\");\\r\\n  }\\r\\n\\r\\n  // Explainer from: https://solidity-by-example.org/fallback/\\r\\n  // Ether is sent to contract\\r\\n  //      is msg.data empty?\\r\\n  //          /   \\\\\\r\\n  //         yes  no\\r\\n  //         /     \\\\\\r\\n  //    receive()?  fallback()\\r\\n  //     /   \\\\\\r\\n  //   yes   no\\r\\n  //  /        \\\\\\r\\n  //receive()  fallback()\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\",\"keccak256\":\"0x19d126c34b5496a1e1c1e3bd41496ceb94f17a29fd65b94659f8d84d98341508\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n  // We could make this public, but then we'd have to deploy it\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    // Rinkeby ETH / USD Address\\r\\n    // https://docs.chain.link/docs/ethereum-addresses/\\r\\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit; answer is the current price of eth it comes in 8 extra digits with no decimals we add ten more zeros to convert to wei\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; // ethAmount is in wei\\r\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb6c2279bc4fc846a06049c756a1a13746415349a5d46de16d6091188b697d05e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129238038062001292833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111136200017f6000396000818161019b01528181610560015261080401526111136000f3fe60806040526004361061007b5760003560e01c8063b60d42881161004e578063b60d42881461011d578063be2693f014610127578063dba6335f14610131578063dc0d3dff1461015c5761007b565b80633ccfd60b146100805780633e47d6f31461008a5780636b69a592146100c7578063741bef1a146100f2575b600080fd5b610088610199565b005b34801561009657600080fd5b506100b160048036038101906100ac9190610a4b565b6103d9565b6040516100be9190610a91565b60405180910390f35b3480156100d357600080fd5b506100dc6103f1565b6040516100e99190610a91565b60405180910390f35b3480156100fe57600080fd5b506101076103fe565b6040516101149190610b0b565b60405180910390f35b610125610424565b005b61012f61055e565b005b34801561013d57600080fd5b50610146610802565b6040516101539190610b35565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e9190610b7c565b610826565b6040516101909190610b35565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102c95760006001828154811061024457610243610ba9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102c190610c07565b915050610221565b50600067ffffffffffffffff8111156102e5576102e4610c50565b5b6040519080825280602002602001820160405280156103135781602001602082028036833780820191505090505b5060019080519060200190610329929190610941565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161035090610cb0565b60006040518083038185875af1925050503d806000811461038d576040519150601f19603f3d011682016040523d82523d6000602084013e610392565b606091505b50509050806103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d22565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610463600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086590919063ffffffff16565b10156104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90610d8e565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104f29190610dae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561066757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161061d575b5050505050905060005b81518110156106f157600082828151811061068f5761068e610ba9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106e990610c07565b915050610671565b50600067ffffffffffffffff81111561070d5761070c610c50565b5b60405190808252806020026020018201604052801561073b5781602001602082028036833780820191505090505b5060019080519060200190610751929190610941565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161077890610cb0565b60006040518083038185875af1925050503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b50509050806107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590610d22565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061083657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610871836108a1565b90506000670de0b6b3a7640000858361088a9190610e04565b6108949190610e8d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190610f4b565b5050509150506402540be400816109399190610fc6565b915050919050565b8280548282559060005260206000209081019282156109ba579160200282015b828111156109b95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610961565b5b5090506109c791906109cb565b5090565b5b808211156109e45760008160009055506001016109cc565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a18826109ed565b9050919050565b610a2881610a0d565b8114610a3357600080fd5b50565b600081359050610a4581610a1f565b92915050565b600060208284031215610a6157610a606109e8565b5b6000610a6f84828501610a36565b91505092915050565b6000819050919050565b610a8b81610a78565b82525050565b6000602082019050610aa66000830184610a82565b92915050565b6000819050919050565b6000610ad1610acc610ac7846109ed565b610aac565b6109ed565b9050919050565b6000610ae382610ab6565b9050919050565b6000610af582610ad8565b9050919050565b610b0581610aea565b82525050565b6000602082019050610b206000830184610afc565b92915050565b610b2f81610a0d565b82525050565b6000602082019050610b4a6000830184610b26565b92915050565b610b5981610a78565b8114610b6457600080fd5b50565b600081359050610b7681610b50565b92915050565b600060208284031215610b9257610b916109e8565b5b6000610ba084828501610b67565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1282610a78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4557610c44610bd8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c9a600083610c7f565b9150610ca582610c8a565b600082019050919050565b6000610cbb82610c8d565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d0c600b83610cc5565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d78601b83610cc5565b9150610d8382610d42565b602082019050919050565b60006020820190508181036000830152610da781610d6b565b9050919050565b6000610db982610a78565b9150610dc483610a78565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df957610df8610bd8565b5b828201905092915050565b6000610e0f82610a78565b9150610e1a83610a78565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5357610e52610bd8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9882610a78565b9150610ea383610a78565b925082610eb357610eb2610e5e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610edd81610ebe565b8114610ee857600080fd5b50565b600081519050610efa81610ed4565b92915050565b6000819050919050565b610f1381610f00565b8114610f1e57600080fd5b50565b600081519050610f3081610f0a565b92915050565b600081519050610f4581610b50565b92915050565b600080600080600060a08688031215610f6757610f666109e8565b5b6000610f7588828901610eeb565b9550506020610f8688828901610f21565b9450506040610f9788828901610f36565b9350506060610fa888828901610f36565b9250506080610fb988828901610eeb565b9150509295509295909350565b6000610fd182610f00565b9150610fdc83610f00565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101b5761101a610bd8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105857611057610bd8565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109557611094610bd8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110d2576110d1610bd8565b5b82820290509291505056fea2646970667358221220bf02632eed91142c41f954da8545c711ba3fba7b9e34f678b1da54801fa0d0c964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063b60d42881161004e578063b60d42881461011d578063be2693f014610127578063dba6335f14610131578063dc0d3dff1461015c5761007b565b80633ccfd60b146100805780633e47d6f31461008a5780636b69a592146100c7578063741bef1a146100f2575b600080fd5b610088610199565b005b34801561009657600080fd5b506100b160048036038101906100ac9190610a4b565b6103d9565b6040516100be9190610a91565b60405180910390f35b3480156100d357600080fd5b506100dc6103f1565b6040516100e99190610a91565b60405180910390f35b3480156100fe57600080fd5b506101076103fe565b6040516101149190610b0b565b60405180910390f35b610125610424565b005b61012f61055e565b005b34801561013d57600080fd5b50610146610802565b6040516101539190610b35565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e9190610b7c565b610826565b6040516101909190610b35565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102c95760006001828154811061024457610243610ba9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102c190610c07565b915050610221565b50600067ffffffffffffffff8111156102e5576102e4610c50565b5b6040519080825280602002602001820160405280156103135781602001602082028036833780820191505090505b5060019080519060200190610329929190610941565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161035090610cb0565b60006040518083038185875af1925050503d806000811461038d576040519150601f19603f3d011682016040523d82523d6000602084013e610392565b606091505b50509050806103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d22565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610463600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086590919063ffffffff16565b10156104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90610d8e565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104f29190610dae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561066757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161061d575b5050505050905060005b81518110156106f157600082828151811061068f5761068e610ba9565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106e990610c07565b915050610671565b50600067ffffffffffffffff81111561070d5761070c610c50565b5b60405190808252806020026020018201604052801561073b5781602001602082028036833780820191505090505b5060019080519060200190610751929190610941565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161077890610cb0565b60006040518083038185875af1925050503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b50509050806107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590610d22565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061083657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610871836108a1565b90506000670de0b6b3a7640000858361088a9190610e04565b6108949190610e8d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190610f4b565b5050509150506402540be400816109399190610fc6565b915050919050565b8280548282559060005260206000209081019282156109ba579160200282015b828111156109b95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610961565b5b5090506109c791906109cb565b5090565b5b808211156109e45760008160009055506001016109cc565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a18826109ed565b9050919050565b610a2881610a0d565b8114610a3357600080fd5b50565b600081359050610a4581610a1f565b92915050565b600060208284031215610a6157610a606109e8565b5b6000610a6f84828501610a36565b91505092915050565b6000819050919050565b610a8b81610a78565b82525050565b6000602082019050610aa66000830184610a82565b92915050565b6000819050919050565b6000610ad1610acc610ac7846109ed565b610aac565b6109ed565b9050919050565b6000610ae382610ab6565b9050919050565b6000610af582610ad8565b9050919050565b610b0581610aea565b82525050565b6000602082019050610b206000830184610afc565b92915050565b610b2f81610a0d565b82525050565b6000602082019050610b4a6000830184610b26565b92915050565b610b5981610a78565b8114610b6457600080fd5b50565b600081359050610b7681610b50565b92915050565b600060208284031215610b9257610b916109e8565b5b6000610ba084828501610b67565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1282610a78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4557610c44610bd8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c9a600083610c7f565b9150610ca582610c8a565b600082019050919050565b6000610cbb82610c8d565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d0c600b83610cc5565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d78601b83610cc5565b9150610d8382610d42565b602082019050919050565b60006020820190508181036000830152610da781610d6b565b9050919050565b6000610db982610a78565b9150610dc483610a78565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df957610df8610bd8565b5b828201905092915050565b6000610e0f82610a78565b9150610e1a83610a78565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5357610e52610bd8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9882610a78565b9150610ea383610a78565b925082610eb357610eb2610e5e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610edd81610ebe565b8114610ee857600080fd5b50565b600081519050610efa81610ed4565b92915050565b6000819050919050565b610f1381610f00565b8114610f1e57600080fd5b50565b600081519050610f3081610f0a565b92915050565b600081519050610f4581610b50565b92915050565b600080600080600060a08688031215610f6757610f666109e8565b5b6000610f7588828901610eeb565b9550506020610f8688828901610f21565b9450506040610f9788828901610f36565b9350506060610fa888828901610f36565b9250506080610fb988828901610eeb565b9150509295509295909350565b6000610fd182610f00565b9150610fdc83610f00565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101b5761101a610bd8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105857611057610bd8565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109557611094610bd8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110d2576110d1610bd8565b5b82820290509291505056fea2646970667358221220bf02632eed91142c41f954da8545c711ba3fba7b9e34f678b1da54801fa0d0c964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}